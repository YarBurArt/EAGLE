name: Pylint

on:
  push:
  pull_request:

jobs:
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # to avoid parsing failed
        python-version: ['3.13']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

        # maybe cd backend if .toml is not in root
      - name: Install dependencies with Poetry
        working-directory: backend
        run: |
          poetry config virtualenvs.in-project true
          poetry add pylint
          poetry install --no-interaction --no-ansi
      # files in what we dont need linter
      # PYTHONPATH to process import-error of app
      # check pylint issues unsubscriptable-object for E1136
      # like that https://github.com/sqlalchemy/sqlalchemy/discussions/9202
      - name: Run pylint
        working-directory: backend
        run: |
          FILES=$(git ls-files '*.py' \
          ':!alembic/**' \
          ':!app/tests/**' \
          ':!app/schemas/**' \
          ':!migration/**')
          export PYTHONPATH=.:backend 
          OUTPUT=$(poetry run pylint --disable=E1136,E1102,E1101 $FILES) || echo "$?" > rc.txt
          echo "$OUTPUT"
          echo "$OUTPUT" > output.txt
      # filter linter output for final result and check cuz holy linux
      - name: Check code rating > N
        working-directory: backend
        run: |
          RATING=$(grep "Your code has been rated at" output.txt \
            | sed -E 's/.*rated at ([0-9]+(\.[0-9]+)?).*/\1/')
          echo "Rating is $RATING"
          awk -v r="$RATING" 'BEGIN { exit (r < 6.0) }'

      - name: Check for Fatal/Error messages  
        working-directory: backend
        run: |
          PYLINT_RC=$(cat rc.txt)
          if [ $(( PYLINT_RC & 3 )) -ne 0 ]; then
            echo "Fatal/Error detected (code $PYLINT_RC)"
            exit 1
          fi
    # - name: Cache
    #   uses: actions/cache@v4.2.3
    #   with:
    # # A list of files, directories, and wildcard patterns to cache and restore
    #     path: 
    #     # An explicit key for restoring and saving the cache
    #     key: 
    #     # An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
    #     restore-keys: # optional
    #     # The chunk size used to split up large files during upload, in bytes
    #     upload-chunk-size: # optional
    #     # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
    #     enableCrossOsArchive: # optional, default is false
    #     # Fail the workflow if cache entry is not found
    #     fail-on-cache-miss: # optional, default is false
    #     # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
    #     lookup-only: # optional, default is false
    #     # Run the post step to save the cache even if another step before fails
    #     save-always: # optional, default is false

    # - name: First interaction
    #   uses: actions/first-interaction@v1.3.0
    #   with:
    # # Token for the repository. Can be passed in using {{ secrets.GITHUB_TOKEN }}
    #     repo-token: 
    #     # Comment to post on an individual's first issue
    #     issue-message: # optional
    #     # Comment to post on an individual's first pull request
    #     pr-message: # optional
          
